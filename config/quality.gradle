apply plugin: 'checkstyle'
apply plugin: 'findbugs'
//apply plugin: 'pmd'

check.dependsOn 'checkstyle', 'findbugs' /*,'pmd', 'lint'*/

//------------------------------pmd------------------------------
//pmd {
//    toolVersion = '5.3.3'
//    ignoreFailures = false
//    ruleSetFiles = files("${project.rootDir}/AndroidCodeQualityConfig/quality/pmd/pmd-ruleset.xml")
//    ruleSets = []
//}
//task pmd(type: Pmd, group: 'verification') {
//    source 'src'
//    include '**/*.java'
//    exclude '**/gen/**'
//
//    reports {
//        xml.enabled = false
//        html.enabled = true
//        xml {
//            destination "${project.rootDir}/${project.getName()}/build/reports/pmd/pmd.xml"
//        }
//        html {
//            destination "${project.rootDir}/${project.getName()}/build/reports/pmd/pmd.html"
//        }
//    }
//}

//------------------------------findbugs------------------------------
//task findbugs(type: FindBugs, dependsOn: assemble, group: 'verification') {
//task customFindBugs(type: FindBugs) {
// task findbugs(type: FindBugs) {
task findbugs(type: FindBugs, dependsOn: rootProject.ext.findbugsDependsOn) {
    //toolVersion = "3.0.1"
    ignoreFailures = true
    effort = "max"
    reportLevel = "medium"
    excludeFilter = file("$rootProject.rootDir/config/findbugs/findbugs-exclude-android.xml")
    includeFilter = file("$rootProject.rootDir/config/findbugs/findbugs-include.xml")
    classes = files("$project.buildDir/intermediates/classes")
    source fileTree('src/main/java/')
    include '**/*.java'
    exclude rootProject.ext.findbugsExclude
    classpath = files()
    reports {
        xml {
            enabled = true
            withMessages = true
            destination "$project.buildDir/outputs/findbugs/findbugs_result.xml"
        }

        html {
            enabled = false
            destination "$project.buildDir/outputs/findbugs/findbugs_result.html"
        }
    }
}
//build.dependsOn customFindbugs

//------------------------------checkstyle------------------------------
task checkstyle(type: Checkstyle) {
    showViolations true
    ignoreFailures = true
    configFile file("$rootProject.rootDir/config/checkstyle/checkstyle.xml")
    source fileTree('src/main/java/')
    include '**/*.java'
    exclude rootProject.ext.checkstyleExclude
    classpath = files()

    reports {
        xml {
            enabled = true
            destination "$project.buildDir/outputs/checkstyle/checkstyle_result.xml"
        }
        html {
            enabled = false
            destination "$project.buildDir/outputs/checkstyle/checkstyle_result.html"
        }
    }
}

//------------------------------lint------------------------------
android {
    lintOptions {
        abortOnError false
        quiet false
        showAll true
        xmlReport true
        htmlReport true
        lintConfig file("${project.rootDir}/config/lint/lint.xml")

//        xmlOutput new File("$project.buildDir/outputs/lint/lint-report.xml")
//        htmlOutput file("lint/lint-report.html")
    }
}
//apply from: "${project.rootDir}/config/lint/lint-summary.gradle"

//-----------------------------------------------------------------
//subprojects { prj ->
//    logger.debug("subprojects: " + prj.name)
//    if (!rootProject.ext.ignoredByQuality.contains(prj.name)) {
//        apply from: "$rootDir/config/quality.gradle"
//    }
//}
